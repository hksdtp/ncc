-- =====================================================
-- FIX BUCKET RLS POLICIES - S·ª≠a l·ªói "row-level security policy violation"
-- =====================================================
-- Copy v√† paste script n√†y v√†o SQL Editor trong Supabase Dashboard

-- üîç KI·ªÇM TRA HI·ªÜN TR·∫†NG
-- =====================================================
SELECT 'Current buckets:' as info;
SELECT id, name, public, created_at FROM storage.buckets;

SELECT 'Current bucket policies:' as info;
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE schemaname = 'storage' AND tablename = 'buckets';

-- üßπ X√ìA C√ÅC POLICIES C≈® CHO BUCKETS (n·∫øu c√≥)
-- =====================================================
DROP POLICY IF EXISTS "Public read buckets" ON storage.buckets;
DROP POLICY IF EXISTS "Public create buckets" ON storage.buckets;
DROP POLICY IF EXISTS "Public update buckets" ON storage.buckets;
DROP POLICY IF EXISTS "Public delete buckets" ON storage.buckets;
DROP POLICY IF EXISTS "Allow public bucket access" ON storage.buckets;
DROP POLICY IF EXISTS "Allow authenticated bucket access" ON storage.buckets;

-- üîì T·∫†O RLS POLICIES M·ªöI CHO STORAGE.BUCKETS
-- =====================================================

-- Cho ph√©p public ƒë·ªçc danh s√°ch buckets
CREATE POLICY "Allow public read buckets" ON storage.buckets
FOR SELECT USING (true);

-- Cho ph√©p public t·∫°o buckets
CREATE POLICY "Allow public create buckets" ON storage.buckets
FOR INSERT WITH CHECK (true);

-- Cho ph√©p public update buckets
CREATE POLICY "Allow public update buckets" ON storage.buckets
FOR UPDATE USING (true) WITH CHECK (true);

-- Cho ph√©p public delete buckets (optional, c√≥ th·ªÉ b·ªè n·∫øu kh√¥ng c·∫ßn)
CREATE POLICY "Allow public delete buckets" ON storage.buckets
FOR DELETE USING (true);

-- üîì KI·ªÇM TRA V√Ä S·ª¨A RLS POLICIES CHO STORAGE.OBJECTS
-- =====================================================

-- X√≥a policies c≈© cho objects
DROP POLICY IF EXISTS "Public read access for supplier-media" ON storage.objects;
DROP POLICY IF EXISTS "Authenticated upload for supplier-media" ON storage.objects;
DROP POLICY IF EXISTS "Public upload for supplier-media" ON storage.objects;
DROP POLICY IF EXISTS "Allow public read access" ON storage.objects;
DROP POLICY IF EXISTS "Allow public upload access" ON storage.objects;
DROP POLICY IF EXISTS "Allow public update access" ON storage.objects;
DROP POLICY IF EXISTS "Allow public delete access" ON storage.objects;

-- T·∫°o policies m·ªõi cho objects (cho t·∫•t c·∫£ buckets)
CREATE POLICY "Allow public read all objects" ON storage.objects
FOR SELECT USING (true);

CREATE POLICY "Allow public insert all objects" ON storage.objects
FOR INSERT WITH CHECK (true);

CREATE POLICY "Allow public update all objects" ON storage.objects
FOR UPDATE USING (true) WITH CHECK (true);

CREATE POLICY "Allow public delete all objects" ON storage.objects
FOR DELETE USING (true);

-- ü™£ T·∫†O BUCKET SUPPLIER-MEDIA (n·∫øu ch∆∞a c√≥)
-- =====================================================
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
    'supplier-media',
    'supplier-media', 
    true,
    52428800, -- 50MB limit
    ARRAY['image/*', 'video/*', 'application/*']
)
ON CONFLICT (id) DO UPDATE SET 
    public = true,
    file_size_limit = 52428800,
    allowed_mime_types = ARRAY['image/*', 'video/*', 'application/*'];

-- ü™£ T·∫†O TH√äM M·ªòT S·ªê BUCKETS KH√ÅC ƒê·ªÇ TEST
-- =====================================================
INSERT INTO storage.buckets (id, name, public, file_size_limit)
VALUES 
    ('media', 'media', true, 52428800),
    ('uploads', 'uploads', true, 52428800),
    ('files', 'files', true, 52428800),
    ('storage', 'storage', true, 52428800)
ON CONFLICT (id) DO UPDATE SET public = true;

-- üîç KI·ªÇM TRA K·∫æT QU·∫¢
-- =====================================================
SELECT 'Buckets after fix:' as info;
SELECT id, name, public, created_at FROM storage.buckets ORDER BY created_at;

SELECT 'Bucket policies after fix:' as info;
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE schemaname = 'storage' AND tablename = 'buckets';

SELECT 'Object policies after fix:' as info;
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE schemaname = 'storage' AND tablename = 'objects';

-- üß™ TEST QUERIES
-- =====================================================
SELECT 'Test bucket access:' as info;
-- Simulate what the app does
SELECT id, name, public FROM storage.buckets WHERE public = true;

SELECT 'Ready for testing!' as status;
