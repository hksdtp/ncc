const { chromium } = require('playwright');

async function comprehensiveBucketTest() {
    console.log('üöÄ COMPREHENSIVE BUCKET TEST - Ki·ªÉm tra to√†n di·ªán sau optimization...');
    
    const browser = await chromium.launch({ 
        headless: false,
        slowMo: 800
    });
    
    const context = await browser.newContext();
    const page = await context.newPage();
    
    // Capture all events
    const errors = [];
    const warnings = [];
    const networkRequests = [];
    
    page.on('console', msg => {
        if (msg.type() === 'error') {
            errors.push(msg.text());
        } else if (msg.type() === 'warn') {
            warnings.push(msg.text());
        }
    });
    
    page.on('request', request => {
        if (request.url().includes('supabase')) {
            networkRequests.push({
                method: request.method(),
                url: request.url(),
                timestamp: new Date().toLocaleTimeString()
            });
        }
    });
    
    try {
        await page.goto('file://' + __dirname + '/create_bucket.html');
        await page.waitForLoadState('networkidle');
        
        console.log('‚úÖ Trang ƒë√£ load th√†nh c√¥ng');
        
        // Test 1: List buckets (ki·ªÉm tra buckets c√≥ t·ªìn t·∫°i)
        console.log('\nüß™ TEST 1: List existing buckets...');
        await page.click('button:has-text("List Existing Buckets")');
        await page.waitForTimeout(3000);
        
        const logAfterList = await page.locator('#log').textContent();
        const bucketLines = logAfterList.split('\n').filter(line => 
            line.includes('public: true') || line.includes('Found') || line.includes('buckets')
        );
        
        console.log('üìã Buckets found:');
        bucketLines.forEach(line => console.log('  ', line.trim()));
        
        // Test 2: Create bucket (should show "already exists")
        console.log('\nüß™ TEST 2: Attempt bucket creation...');
        await page.click('button:has-text("Create Bucket")');
        await page.waitForTimeout(5000);
        
        const logAfterCreate = await page.locator('#log').textContent();
        const createResults = logAfterCreate.split('\n').slice(-10).filter(line => 
            line.includes('Failed to create') || line.includes('Successfully') || line.includes('already exists')
        );
        
        console.log('üìã Creation results:');
        createResults.forEach(line => console.log('  ', line.trim()));
        
        // Ph√¢n t√≠ch k·∫øt qu·∫£ creation
        const hasRLSError = logAfterCreate.includes('row-level security policy');
        const hasExistsError = logAfterCreate.includes('already exists');
        const hasSuccess = logAfterCreate.includes('Successfully created');
        
        if (hasRLSError) {
            console.log('‚ùå V·∫™N C√íN L·ªñI RLS POLICY - c·∫ßn ch·∫°y l·∫°i SQL script');
        } else if (hasExistsError || hasSuccess) {
            console.log('‚úÖ BUCKET CREATION HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG');
        }
        
        // Test 3: Upload test (ki·ªÉm tra mime type support)
        console.log('\nüß™ TEST 3: Upload functionality test...');
        await page.click('button:has-text("Test Upload")');
        await page.waitForTimeout(4000);
        
        const finalLog = await page.locator('#log').textContent();
        const uploadLines = finalLog.split('\n').slice(-8).filter(line => 
            line.includes('Upload') || line.includes('mime') || line.includes('Testing')
        );
        
        console.log('üìã Upload test results:');
        uploadLines.forEach(line => console.log('  ', line.trim()));
        
        // Ph√¢n t√≠ch upload results
        const hasMimeError = finalLog.includes('mime type') && finalLog.includes('not supported');
        const hasUploadSuccess = finalLog.includes('Upload successful') || finalLog.includes('uploaded successfully');
        
        if (hasMimeError) {
            console.log('‚ö†Ô∏è  MIME TYPE V·∫™N C√íN V·∫§N ƒê·ªÄ - c·∫ßn ch·∫°y optimize script');
        } else if (hasUploadSuccess) {
            console.log('‚úÖ UPLOAD HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O');
        } else {
            console.log('‚ÑπÔ∏è  Upload test kh√¥ng c√≥ l·ªói mime type');
        }
        
        // Test 4: Performance analysis
        console.log('\nüìä PERFORMANCE ANALYSIS:');
        console.log('- Total network requests:', networkRequests.length);
        console.log('- Console errors:', errors.length);
        console.log('- Console warnings:', warnings.length);
        
        if (networkRequests.length > 0) {
            console.log('\nüåê Network requests timeline:');
            networkRequests.forEach(req => {
                console.log(`  [${req.timestamp}] ${req.method} ${req.url.split('/').pop()}`);
            });
        }
        
        if (errors.length > 0) {
            console.log('\n‚ùå Console errors:');
            errors.slice(0, 3).forEach(error => console.log('  ', error));
            if (errors.length > 3) console.log(`  ... v√† ${errors.length - 3} l·ªói kh√°c`);
        }
        
        // Test 5: Status check
        const statusElement = await page.locator('#status');
        const statusText = await statusElement.textContent();
        const statusClass = await statusElement.getAttribute('class');
        
        console.log('\nüìã Final status:');
        console.log('  Text:', statusText);
        console.log('  Class:', statusClass);
        
        // Screenshot final state
        await page.screenshot({ 
            path: 'test_screenshots/comprehensive_test_result.png', 
            fullPage: true 
        });
        
        // Overall assessment
        console.log('\nüéØ T·ªîNG K·∫æT ƒê√ÅNH GI√Å:');
        
        let score = 0;
        if (!hasRLSError) score += 30; // RLS fixed
        if (hasExistsError || hasSuccess) score += 25; // Bucket creation works
        if (!hasMimeError) score += 25; // Mime type fixed
        if (errors.length < 3) score += 10; // Low error count
        if (networkRequests.length > 0 && networkRequests.length < 15) score += 10; // Reasonable network usage
        
        console.log(`üìä ƒêi·ªÉm s·ªë: ${score}/100`);
        
        if (score >= 90) {
            console.log('üéâ XU·∫§T S·∫ÆC - H·ªá th·ªëng ho·∫°t ƒë·ªông ho√†n h·∫£o!');
        } else if (score >= 70) {
            console.log('‚úÖ T·ªêT - H·ªá th·ªëng ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh');
        } else if (score >= 50) {
            console.log('‚ö†Ô∏è  TRUNG B√åNH - C·∫ßn m·ªôt s·ªë c·∫£i thi·ªán');
        } else {
            console.log('‚ùå C·∫¶N S·ª¨A - Nhi·ªÅu v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt');
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
        await page.screenshot({ path: 'test_screenshots/test_error.png', fullPage: true });
    } finally {
        await browser.close();
        console.log('\nüé≠ Test ho√†n th√†nh - Browser ƒë√£ ƒë√≥ng');
    }
}

// T·∫°o th∆∞ m·ª•c screenshots n·∫øu ch∆∞a c√≥
const fs = require('fs');
if (!fs.existsSync('test_screenshots')) {
    fs.mkdirSync('test_screenshots');
}

comprehensiveBucketTest().catch(console.error);
